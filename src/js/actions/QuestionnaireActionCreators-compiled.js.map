{"version":3,"sources":["QuestionnaireActionCreators.js"],"names":[],"mappings":";;;;;;;;0BAAuB,eAAe;;;;yBAChB,cAAc;;;;qBAErB;AACd,aAAY,EAAA,sBAAC,MAAM,EAAE;AACpB,0BAAW,gBAAgB,CAAC;AAC3B,OAAI,EAAE,uBAAU,WAAW,CAAC,aAAa;AACzC,OAAI,EAAE,MAAM;GACZ,CAAC,CAAC;EACH;;;;;AAKA,uBAAsB,EAAA,kCAAG;;;AACzB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,WAAW,GAAG,sCAAsC,CAAC;;AAExD,OAAK,CAAC,WAAW,CAAC,CACjB,IAAI,CAAC,UAAA,QAAQ;UAAI,QAAQ,CAAC,IAAI,EAAE;GAAA,CAAC,CAC/B,IAAI,CAAC,UAAA,IAAI,EAAI;AACd,SAAK,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;GACrC,CAAC,SACI,CAAC,UAAA,CAAC;UAAI,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;GAAA,CAAC,CAAC;EACtC;;;;;AAKF,OAAM,EAAA,gBAAC,MAAM,EAAE,MAAM,EAAE;AACtB,0BAAW,gBAAgB,CAAC;AAC3B,OAAI,EAAE,uBAAU,WAAW,CAAC,QAAQ;AACpC,SAAM,EAAE,CAAC,MAAM,EAAC,MAAM,CAAC;GACvB,CAAC,CAAC;EACH;;;;;;;;;;;;;;;AAAA,CAeD","file":"QuestionnaireActionCreators-compiled.js","sourcesContent":["import Dispatcher from '../Dispatcher';\nimport Constants from '../Constants';\n\nexport default {\n\tsetQuestions(guides) {\n\t\tDispatcher.handleViewAction({\n\t\t\ttype: Constants.ActionTypes.SET_QUESTIONS,\n\t\t\tdata: guides\n\t\t});\n\t},\n\n\t/*\n\t * using json-server to simulate a api which would be used to pull n number of questionnaires from DB.\n\t */\n  getQuestionsFromServer() {\n\t\tlet self = this;\n\t\tlet destination = 'http://localhost:3000/questionnaires';\n\t  // request from json service.response.json()\n\t  fetch(destination)\n\t\t\t.then(response => response.json())\n\t    .then(data => {\n\t\t\t  this.setQuestions(data[0].questions);\n\t\t  })\n\t\t  .catch(e => console.log(\"Error\", e));\n  },\n\n\t/*\n\t *  action to hold new answer in the store.\n\t */\n\tanswer(number, choice) {\n\t\tDispatcher.handleViewAction({\n\t\t\ttype: Constants.ActionTypes.ANSWERED,\n\t\t\tanswer: [number,choice]\n\t\t});\n\t}\n\n\t/*\n\t * Would be used to handle business logic, instead just wrote on client side.\n\t */\n\t//tally(score) {\n\t//\tif(score >= 10){\n\t//\n\t//\t}\n\t//\tDispatcher.handleViewAction({\n\t//\t\ttype: Constants.ActionTypes.TALLY,\n\t//\t\ttext: score\n\t//\t});\n\t//},\n\n};\n"]}