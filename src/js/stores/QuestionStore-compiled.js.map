{"version":3,"sources":["QuestionStore.js"],"names":[],"mappings":";;;;;;;;0BAAuB,eAAe;;;;yBAChB,cAAc;;;;yBACd,aAAa;;;;4BAChB,eAAe;;;;;AAGlC,IAAI,UAAU,GAAG,EAAE,CAAC;;;AAGpB,SAAS,OAAO,CAAC,KAAK,EAAmB;MAAjB,SAAS,yDAAC,KAAK;;AACrC,YAAU,CAAC,IAAI,CAAC,EAAC,KAAK,EAAL,KAAK,EAAE,SAAS,EAAT,SAAS,EAAC,CAAC,CAAC;CACrC;;;AAGD,IAAM,aAAa,GAAG,+BAAO,EAAE,0BAAa;;AAE1C,QAAM,EAAA,kBAAG;AACR,WAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;AAC5C,WAAO;AACL,eAAS,EAAE,UAAU;KACtB,CAAC;GACH;;;AAGD,iBAAe,EAAE,wBAAW,QAAQ,CAAC,UAAS,OAAO,EAAE;AACrD,QAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;;AAE5B,YAAO,MAAM,CAAC,IAAI;AAChB,WAAK,uBAAU,WAAW,CAAC,KAAK;AAC9B,YAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;;;;AAIzB,YAAI,KAAK,EAAE;AACT,iBAAO,CAAC,IAAI,CAAC,CAAC;AACnB,uBAAa,CAAC,UAAU,EAAE,CAAC;SACvB;AACD,cAAM;AAAA,AACX,WAAK,uBAAU,WAAW,CAAC,aAAa;AACvC,YAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AACvB,YAAG,IAAI,EAAC;AACP,oBAAU,GAAG,IAAI,CAAC;SAClB;AACD,qBAAa,CAAC,UAAU,EAAE,CAAC;AAC3B,cAAM;;;AAAA,KAGL;GACF,CAAC;CACH,CAAC,CAAC;;qBAEY,aAAa","file":"QuestionStore-compiled.js","sourcesContent":["import Dispatcher from '../Dispatcher';\nimport Constants from '../Constants';\nimport BaseStore from './BaseStore';\nimport assign from 'object-assign';\n\n// data storage\nlet _questions = [];\n\n// add private functions to modify data\nfunction addItem(title, completed=false) {\n  _questions.push({title, completed});\n}\n\n// Facebook style store creation.\nconst QuestionStore = assign({}, BaseStore, {\n  // public methods used by Controller-View to operate on data\n  getAll() {\n\t  console.log('in question store', _questions);\n    return {\n      questions: _questions\n    };\n  },\n\n  // register store with dispatcher, allowing actions to flow through\n  dispatcherIndex: Dispatcher.register(function(payload) {\n    let action = payload.action;\n\n    switch(action.type) {\n      case Constants.ActionTypes.TALLY:\n        let score = action.score;\n        // NOTE: if this action needs to wait on another store:\n        // Dispatcher.waitFor([OtherStore.dispatchToken]);\n        // For details, see: http://facebook.github.io/react/blog/2014/07/30/flux-actions-and-the-dispatcher.html#why-we-need-a-dispatcher\n        if (score) {\n          addItem(text);\n\t\t\t\t\tQuestionStore.emitChange();\n        }\n        break;\n\t\t\tcase Constants.ActionTypes.SET_QUESTIONS:\n\t\t\t\tlet data = action.data;\n\t\t\t\tif(data){\n\t\t\t\t\t_questions = data;\n\t\t\t\t}\n\t\t\t\tQuestionStore.emitChange();\n\t\t\t\tbreak;\n\n      // add more cases for other actionTypes...\n    }\n  })\n});\n\nexport default QuestionStore;\n"]}